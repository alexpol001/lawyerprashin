<?php

namespace common\models\materials;

use common\components\Common;
use common\models\materials\attribute\MaterialAttribute;
use Yii;
use yii\db\ActiveQuery;
use yii\helpers\ArrayHelper;
use zabachok\behaviors\SluggableBehavior;

/**
 * This is the model class for table "material".
 *
 * @property int $id
 * @property int $parent
 * @property string $title
 * @property string $slug
 * @property string $text
 * @property int $sort
 * @property int $status
 * @property ActiveQuery children
 * @property ActiveQuery attribute_list
 */
class Material extends \yii\db\ActiveRecord
{
    public $PostData;
    const SCENARIO_EDIT = 'edit';

    public function scenarios()
    {
        $scenarios = parent::scenarios();
        $scenarios[self::SCENARIO_EDIT] = ['sort'];
        return $scenarios;
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'material';
    }

    public function behaviors()
    {
        return [
            [
                'class' => SluggableBehavior::className(),
                'attribute' => 'title',
                'ensureUnique' => true
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title', 'slug'], 'required'],
            [['parent', 'sort', 'status'], 'integer'],
            [['sort'], 'default', 'value' => 0],
            [['status'], 'default', 'value' => 1],
            [['text'], 'string'],
            [['title', 'slug'], 'string', 'max' => 255],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'parent' => 'Категория',
            'title' => 'Заголовок',
            'text' => 'Содержание',
            'sort' => 'Порядок сортировки',
            'status' => 'Status',
        ];
    }

    public function getParent()
    {
        return $this->hasOne(Category::className(), ['id' => 'parent']);
    }

    public function getAttribute_list()
    {
        return $this->hasMany(MaterialAttribute::className(), ['material_id' => 'id']);
    }

    public static function getMaterialBySlug($slug) {
        return self::findOne(['slug' => $slug]);
    }

    public function getAttributesByGroup()
    {
        $attributes = MaterialAttribute::find()
            ->andWhere(['material_id' => $this->id])
            ->all();
        return ArrayHelper::map($attributes, 'id', 'self', 'attribute0.group.title');
    }

    /**
     * @return array
     */
    public function getSelectParent() {
        $categories = Category::find();
        return ArrayHelper::map($categories->all(), 'id', 'title');
    }

    public static function getSelectParents() {
        $categories = Category::find()
            ->select(['id', 'title'])
            ->all();
        return ArrayHelper::map($categories, 'id', 'title');;
    }

    public static function getTitle($id) {
        return self::findOne($id)->title;
    }

    /**
     * @param $id
     * @return MaterialAttribute|null
     */
    public function getAttributeById($id) {
        $attribute = MaterialAttribute::findOne(['attribute_id' => $id, 'material_id' => $this->id]);
        return $attribute;
    }

    public function getAttributesFromGroup($group_id, $exclude = []) {
        $attributes = [];
        /** @var MaterialAttribute $attribute */
        foreach ($this->attribute_list as $attribute) {
            if ($attribute->attribute0->group_id == $group_id && !in_array($attribute->attribute_id, $exclude)) {
                $attributes[] = $attribute;
            }
        }
        return $attributes;
    }

    public function load($data, $formName = null)
    {
        $this->PostData = $data;
        return parent::load($data, $formName); // TODO: Change the autogenerated stub
    }

    /**
     * @param bool $insert
     * @param array $changedAttributes
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function afterSave($insert, $changedAttributes)
    {
        if ($this->scenario != self::SCENARIO_EDIT) {
            MaterialAttribute::saveAttributes($this);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @return bool
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function beforeDelete()
    {
        Common::deleteAll($this->attribute_list);
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
}
