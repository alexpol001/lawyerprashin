<?php

namespace common\models\materials\attribute;

use common\components\Common;
use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "attribute".
 *
 * @property int $id
 * @property int $group_id
 * @property string $title
 * @property int $type
 * @property int $sort
 * @property int $status
 */
class Attribute extends \yii\db\ActiveRecord
{
    private static $Types = [
        '0' => 'Текстовое поле',
        '1' => 'Текстовый редактор',
        '2' => 'Текст',
        '3' => 'Файл',
        '4' => 'Цвет',
        '5' => 'Иконка (font awesome)',
    ];

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'attribute';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['group_id', 'title', 'type'], 'required'],
            [['group_id', 'type', 'sort', 'status'], 'integer'],
            [['sort'], 'default', 'value' => 0],
            [['status'], 'default', 'value' => 1],
            [['title'], 'string', 'max' => 255],
            ['type', 'in', 'range' => function () {
                return array_keys(self::$Types);
            }]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'group_id' => 'Группа атрибута',
            'title' => 'Название атрибута',
            'type' => 'Тип',
            'sort' => 'Порядок сортировки',
            'status' => 'Status',
        ];
    }

    public function getGroup()
    {
        return $this->hasOne(AttributeGroup::className(), ['id' => 'group_id']);
    }

    public static function getSelectParents()
    {
        $groups = AttributeGroup::find()
            ->select(['id', 'title'])
            ->all();
        return ArrayHelper::map($groups, 'id', 'title');
    }

    public static function getSelectAll()
    {
        $attributes = Attribute::find()
            ->select(['id', 'group_id', 'title'])
            ->orderBy(['group_id' => SORT_DESC])
            ->all();
        $data = ArrayHelper::map($attributes,'id', 'title', 'group.title');
        return $data;
    }

    public static function getTypes()
    {
        return self::$Types;
    }

    public static function getTypeTitle($key)
    {
        $title = self::$Types[$key];
        return $title ? $title : false;
    }

    /**
     * @return bool
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function beforeDelete()
    {
        Common::deleteAll(CategoryAttribute::findAll(['attribute_id' => $this->id]));
        Common::deleteAll(MaterialAttribute::findAll(['attribute_id' => $this->id]));
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
}
